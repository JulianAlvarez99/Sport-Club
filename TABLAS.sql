DROP DATABASE IF EXISTS ClubDeportivo;
CREATE DATABASE ClubDeportivo;
USE ClubDeportivo;

-- Crear tabla GRUPO_FAMILIAR
CREATE TABLE GRUPO_FAMILIAR (
    NRO_GRUPO INT PRIMARY KEY NOT NULL,
    NRO_SOCIO_TITULAR INT,
    DOMICILIO VARCHAR(50)
);

-- Crear tabla SOCIO como entidad débil
CREATE TABLE SOCIO (
    NRO_SOCIO INT NOT NULL,
    NRO_GRUPO INT NOT NULL,
    NOMBRE_SOCIO VARCHAR(50),
    APELLIDO_SOCIO VARCHAR(50),
    FECHA_NAC_SOCIO DATE,
    MAIL VARCHAR(50),
    PRIMARY KEY(NRO_GRUPO, NRO_SOCIO),
    FOREIGN KEY (NRO_GRUPO) REFERENCES GRUPO_FAMILIAR(NRO_GRUPO)
);

-- Agregar restricción de clave foránea para el socio titular
ALTER TABLE GRUPO_FAMILIAR 
ADD CONSTRAINT FK_SOCIO_TITULAR 
FOREIGN KEY (NRO_GRUPO,NRO_SOCIO_TITULAR) 
REFERENCES SOCIO(NRO_GRUPO,NRO_SOCIO);


CREATE TABLE CUOTA_MENSUAL (
    COD_CUOTA_MENSUAL INT PRIMARY KEY,
    NRO_GRUPO INT NOT NULL,
    IMPORTE_A_PAGAR DECIMAL(10, 2),
    FECHA_VENC DATE,
    FOREIGN KEY (NRO_GRUPO) REFERENCES GRUPO_FAMILIAR(NRO_GRUPO)
);

CREATE TABLE CONTACTO (
    PREFIJO INT NOT NULL,
    NRO_TELEFONO INT NOT NULL,
    DESCRIPCION VARCHAR(255),
    NRO_GRUPO INT NOT NULL,
    PRIMARY KEY (PREFIJO, NRO_TELEFONO),
    FOREIGN KEY (NRO_GRUPO) REFERENCES GRUPO_FAMILIAR(NRO_GRUPO)
);

CREATE TABLE PAGO_MENSUAL (
    COD_CUOTA_MENSUAL INT NOT NULL,
    NRO_COMPROBANTE INT NOT NULL,
    IMPORTE_PAGO_MENSUAL DECIMAL(10, 2) NOT NULL,
    FECHA_PAGO_MENSUAL DATE NOT NULL,
    PRIMARY KEY (COD_CUOTA_MENSUAL, NRO_COMPROBANTE),
    FOREIGN KEY (COD_CUOTA_MENSUAL) REFERENCES CUOTA_MENSUAL(COD_CUOTA_MENSUAL)
);

CREATE TABLE CUOTA_SOCIAL (
    COD_CUOTA_SOCIAL INT PRIMARY KEY NOT NULL,
    MONTO_BASE DECIMAL(10, 2),
    VIGENCIA_CUOTA_SOCIAL DATE,
    PORCENTAJE_MODIFICACION DECIMAL(5, 2),
    NRO_GRUPO INT,
    NRO_SOCIO INT,
    COD_CUOTA_MENSUAL INT NOT NULL,
    FOREIGN KEY (NRO_GRUPO, NRO_SOCIO) REFERENCES SOCIO(NRO_GRUPO, NRO_SOCIO),
    FOREIGN KEY (COD_CUOTA_MENSUAL) REFERENCES CUOTA_MENSUAL(COD_CUOTA_MENSUAL)
);

CREATE TABLE CATEGORIA (
    COD_CATEGORIA INT PRIMARY KEY NOT NULL,
    TIPO_CATEGORIA ENUM('INFANTIL', 'MAYOR', 'VITALICIO')
);

-- Subclases de CATEGORIA
CREATE TABLE INFANTIL (
    COD_CATEGORIA INT PRIMARY KEY NOT NULL,
    MODIFICACION_INFANTIL DECIMAL(5, 2),
    FOREIGN KEY (COD_CATEGORIA) REFERENCES CATEGORIA(COD_CATEGORIA)
);

CREATE TABLE MAYOR (
    COD_CATEGORIA INT PRIMARY KEY NOT NULL,
    MODIFICACION_MAYOR DECIMAL(5, 2),
    FOREIGN KEY (COD_CATEGORIA) REFERENCES CATEGORIA(COD_CATEGORIA)
);

CREATE TABLE VITALICIO (
    COD_CATEGORIA INT PRIMARY KEY NOT NULL,
    MODIFICACION_VITALICIO DECIMAL(5, 2),
    FOREIGN KEY (COD_CATEGORIA) REFERENCES CATEGORIA(COD_CATEGORIA)
);

-- Relación entre SOCIO y CATEGORIA
CREATE TABLE POSEE (
    NRO_GRUPO INT NOT NULL,
    NRO_SOCIO INT NOT NULL,
    COD_CATEGORIA INT NOT NULL,
    PERIODO_CATEGORIA DATE NOT NULL,
    PRIMARY KEY (NRO_GRUPO, NRO_SOCIO, COD_CATEGORIA, PERIODO_CATEGORIA),
    FOREIGN KEY (NRO_GRUPO, NRO_SOCIO) REFERENCES SOCIO(NRO_GRUPO, NRO_SOCIO),
    FOREIGN KEY (COD_CATEGORIA) REFERENCES CATEGORIA(COD_CATEGORIA)
);

CREATE TABLE ACTIVIDAD (
    COD_ACTIVIDAD INT PRIMARY KEY NOT NULL,
    NOMBRE_ACT VARCHAR(50),
    COSTO ENUM('GRATUITA', 'ARANCELADA')
);

-- Subclases de ACTIVIDAD
CREATE TABLE GRATUITA (
    COD_ACTIVIDAD INT PRIMARY KEY NOT NULL,
    FOREIGN KEY (COD_ACTIVIDAD) REFERENCES ACTIVIDAD(COD_ACTIVIDAD)
);

CREATE TABLE ARANCELADA (
    COD_ACTIVIDAD INT PRIMARY KEY NOT NULL,
    ARANCEL DECIMAL(10, 2),
    FOREIGN KEY (COD_ACTIVIDAD) REFERENCES ACTIVIDAD(COD_ACTIVIDAD)
);

-- Relación entre ACTIVIDAD y CATEGORIA
CREATE TABLE PERTENECE (
    COD_ACTIVIDAD INT NOT NULL,
    COD_CATEGORIA INT NOT NULL,
    PRIMARY KEY (COD_ACTIVIDAD, COD_CATEGORIA),
    FOREIGN KEY (COD_ACTIVIDAD) REFERENCES ACTIVIDAD(COD_ACTIVIDAD),
    FOREIGN KEY (COD_CATEGORIA) REFERENCES CATEGORIA(COD_CATEGORIA)
);

CREATE TABLE PROFESIONAL (
    LEGAJO INT PRIMARY KEY NOT NULL,
    NOMBRE_PROF VARCHAR(50),
    APELLIDO_PROF VARCHAR(50),
    FECHA_NAC_PROF DATE,
    TIPO_DOC ENUM('DNI', 'PAS') NOT NULL,
    NRO_DOC INT NOT NULL,
    UNIQUE (TIPO_DOC, NRO_DOC)
);

-- Relación entre PROFESIONAL y ACTIVIDAD (capacitado para)
CREATE TABLE ESTA_CAPACITADO_PARA (
    COD_ACTIVIDAD INT NOT NULL,
    LEGAJO INT NOT NULL,
    PRIMARY KEY (COD_ACTIVIDAD, LEGAJO),
    FOREIGN KEY (COD_ACTIVIDAD) REFERENCES ACTIVIDAD(COD_ACTIVIDAD),
    FOREIGN KEY (LEGAJO) REFERENCES PROFESIONAL(LEGAJO)
);

-- Relación entre PROFESIONAL y ACTIVIDAD (a cargo de)
CREATE TABLE A_CARGO_DE (
    COD_ACTIVIDAD INT NOT NULL,
    LEGAJO INT NOT NULL,
    PRIMARY KEY (COD_ACTIVIDAD, LEGAJO),
    FOREIGN KEY (COD_ACTIVIDAD) REFERENCES ACTIVIDAD(COD_ACTIVIDAD),
    FOREIGN KEY (LEGAJO) REFERENCES PROFESIONAL(LEGAJO)
);

CREATE TABLE PAGO_ARANCEL (
    COD_ACTIVIDAD INT NOT NULL,
    COD_PAGO_ARANCEL INT NOT NULL,
    NRO_GRUPO INT, 
    NRO_SOCIO INT,
    IMPORTE_PAGO_ARANCEL DECIMAL(10, 2),
    TIPO_PAGO_ARANCEL ENUM('MENSUAL', 'BIMESTRAL', 'TRIMESTRAL', 'CUATRIMESTRAL'),
    FECHA_PAGO_ARANCEL DATE,
    PRIMARY KEY (COD_ACTIVIDAD, COD_PAGO_ARANCEL),
    FOREIGN KEY (COD_ACTIVIDAD) REFERENCES ARANCELADA(COD_ACTIVIDAD),
    FOREIGN KEY (NRO_GRUPO, NRO_SOCIO) REFERENCES SOCIO(NRO_GRUPO, NRO_SOCIO)
);

CREATE TABLE AREA (
    COD_AREA INT PRIMARY KEY NOT NULL,
    UBICACION VARCHAR(25) NOT NULL,
    CAPACIDAD INT,
    MANTENIMIENTO VARCHAR(20) NOT NULL,
    ACTIVIDADES TEXT(255)
);

CREATE TABLE TURNO (
    COD_TURNO INT PRIMARY KEY NOT NULL,
    FECHA_TURNO DATE,
    HORARIO TIME
);

CREATE TABLE CRONOGRAMA (
    COD_CRONOGRAMA INT PRIMARY KEY NOT NULL,
    PERIODO DATE,
    LEGAJO INT,
    COD_ACTIVIDAD INT,
    COD_AREA INT,
    COD_TURNO INT,
    FOREIGN KEY (LEGAJO, COD_ACTIVIDAD) REFERENCES A_CARGO_DE(LEGAJO, COD_ACTIVIDAD),
    FOREIGN KEY (COD_AREA) REFERENCES AREA(COD_AREA),
    FOREIGN KEY (COD_TURNO) REFERENCES TURNO(COD_TURNO)
);

-- Relación entre SOCIO y CRONOGRAMA (inscripción)
CREATE TABLE SE_INSCRIBE (
    NRO_GRUPO INT NOT NULL,
    NRO_SOCIO INT NOT NULL,
    COD_CRONOGRAMA INT NOT NULL,
    FECHA_INSCRIPCION DATE NOT NULL,
    PRIMARY KEY (NRO_GRUPO, NRO_SOCIO, COD_CRONOGRAMA, FECHA_INSCRIPCION),
    FOREIGN KEY (NRO_GRUPO, NRO_SOCIO) REFERENCES SOCIO(NRO_GRUPO, NRO_SOCIO),
    FOREIGN KEY (COD_CRONOGRAMA) REFERENCES CRONOGRAMA(COD_CRONOGRAMA)
);


DELIMITER //
#Un pago de arancel para un socio debe ser para una actividad en la cual está inscrito.
CREATE TRIGGER verificar_inscripcion_pago_arancel
BEFORE INSERT ON PAGO_ARANCEL
FOR EACH ROW
BEGIN
    DECLARE v_count INT;

    -- Verificar si el socio está inscrito en la actividad
    SELECT COUNT(*)
    INTO v_count
    FROM SE_INSCRIBE SI
    JOIN CRONOGRAMA C ON SI.COD_CRONOGRAMA = C.COD_CRONOGRAMA
    WHERE SI.NRO_SOCIO = NEW.NRO_SOCIO
    AND C.COD_ACTIVIDAD = NEW.COD_ACTIVIDAD;

    -- Si no está inscrito, lanza un error
    IF v_count = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El socio no está inscrito en la actividad.';
    END IF;
END;
//

DELIMITER ;

#ESTO REEMPLAZA EL DEFERRED PERO ES MEDIO PELIGROSO, VER ALTERNATIVAS
START TRANSACTION;
-- Desactivar la verificación de claves foráneas
SET FOREIGN_KEY_CHECKS = 0;

-- Insertar un nuevo grupo familiar
INSERT INTO GRUPO_FAMILIAR (NRO_GRUPO, NRO_SOCIO_TITULAR, DOMICILIO) 
VALUES (101, 1, '123 Calle Principal');

-- Insertar el socio titular
INSERT INTO SOCIO (NRO_SOCIO, NRO_GRUPO, NOMBRE_SOCIO, APELLIDO_SOCIO, FECHA_NAC_SOCIO, MAIL) 
VALUES (1, 101, 'Juan', 'Pérez', '1980-01-01', 'juan.perez@example.com');

-- Reactivar la verificación de claves foráneas
SET FOREIGN_KEY_CHECKS = 1;

-- Confirmar la transacción
COMMIT;

-- STORED PROCEDURE PARA CARGAR LA TABLA POSEE CON VALORES DEFAULT
DELIMITER $$

CREATE PROCEDURE CargarPosee()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE var_nro_grupo INT;
    DECLARE var_nro_socio INT;
    DECLARE var_fecha_nac DATE;
    DECLARE var_categoria INT;
    DECLARE var_periodo DATE DEFAULT CURDATE();
    DECLARE socio_cursor CURSOR FOR 
    SELECT NRO_GRUPO, NRO_SOCIO, FECHA_NAC_SOCIO FROM SOCIO;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    OPEN socio_cursor;
    
    socio_loop: LOOP
        FETCH socio_cursor INTO var_nro_grupo, var_nro_socio, var_fecha_nac;
        IF done THEN
            LEAVE socio_loop;
        END IF;
        
        -- Determinar la categoría en función de la edad
        SET var_categoria = 
            CASE 
                WHEN TIMESTAMPDIFF(YEAR, var_fecha_nac, CURDATE()) < 18 THEN 0317
                WHEN TIMESTAMPDIFF(YEAR, var_fecha_nac, CURDATE()) < 41 THEN 1840
                ELSE 4165
            END;
        
        -- Insertar en la tabla POSEE
        INSERT INTO POSEE (NRO_GRUPO, NRO_SOCIO, COD_CATEGORIA, PERIODO_CATEGORIA)
        VALUES (var_nro_grupo, var_nro_socio, var_categoria, var_periodo);
    END LOOP;
    
    CLOSE socio_cursor;
END$$

DELIMITER ;

CALL CargarPosee();


-- TRIGGER PARA CARGAR LA TABLA POSEE CON LOS ULTIMOS SOCIOS AGREGADOS
DELIMITER $$

CREATE TRIGGER after_insert_socio
AFTER INSERT ON SOCIO
FOR EACH ROW
BEGIN
    DECLARE var_categoria INT;
    DECLARE var_periodo DATE DEFAULT CURDATE();
    
    SET var_categoria = 
            CASE 
                WHEN TIMESTAMPDIFF(YEAR, NEW.FECHA_NAC_SOCIO, CURDATE()) < 18 THEN 0317
                WHEN TIMESTAMPDIFF(YEAR, NEW.FECHA_NAC_SOCIO, CURDATE()) < 41 THEN 1840
                ELSE 4165
            END;
    
    -- Insertar en la tabla POSEE
    INSERT INTO POSEE (NRO_GRUPO, NRO_SOCIO, COD_CATEGORIA, PERIODO_CATEGORIA)
    VALUES (NEW.NRO_GRUPO, NEW.NRO_SOCIO, var_categoria, var_periodo);
END$$

DELIMITER ;

-- Crear trigger para validar antes de insertar en A_CARGO_DE
DELIMITER //

-- Crear trigger para validar antes de insertar en A_CARGO_DE
CREATE TRIGGER trg_before_insert_acargode
BEFORE INSERT ON A_CARGO_DE
FOR EACH ROW
BEGIN
    -- Verificar si el profesional está capacitado para la actividad
    IF NOT EXISTS (
        SELECT 1
        FROM ESTA_CAPACITADO_PARA
        WHERE LEGAJO = NEW.LEGAJO
          AND COD_ACTIVIDAD = NEW.COD_ACTIVIDAD
    ) THEN
        -- Si no está capacitado, lanzar un error
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'El profesional no está capacitado para esta actividad';
    END IF;
END //

-- Restaurar el delimitador a ;
DELIMITER ;



